<?php

/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 * */
function open_voxb_ting_client_webservice() {
  $ret = array();
  $ret['voxb']['class'] = 'open_voxb';
  $ret['voxb']['url'] = 'open_voxb_url';
  $ret['voxb']['xsdNamespace'] = array('http://oss.dbc.dk/ns/voxb');
  $ret['voxb']['xsd_url'] = 'voxb_xsd_url';

  return $ret;
}



/** Do createMyDataRequest. This method handles rating for given objectId.
 *
 * @param string $id ; id (pid) for material to rate
 * @param inf $rating ; the rating to apply to material
 * @param string $voxb_id ; UserID from voxb
 * @return bool|stdClass|string; FALSE if no succes, xml or json on success
 */
function open_voxb_createMyDataRequest($id, $rating, $voxb_id, $identifierType = 'FAUST', $outputType = 'xml') {
  $item = array(
    'rating' => $rating,
  );
  $object = array(
    'objectIdentifierValue' => $id,
    'objectIdentifierType' => $identifierType,
  );

  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'createMyDataRequest',
      'userId' => $voxb_id,
      'institutionId' => '1',
      'item' => $item,
      'object' => $object,
      'outputType' => $outputType,
    ));

  return $response;
}


/** Do createDataRequest. This method handles a review
 * @param string $id ; id (FAUST) for material to rate
 * @param object $review ; the review to apply to material ([title,Data])
 * @param string $voxb_id ; UserID from voxb
 * @param string $outputType ; desired output from webservice
 *
 * @return bool|stdClass|string; FALSE if no succes, xml or json on success
 */
function open_voxb_createMyReviewRequest($id, $review, $voxb_id, $identifierType = 'FAUST', $outputType = 'xml'){
   $item = array(
    'review' => array(
      'reviewTitle' => $review->title,
      'reviewData' => $review->Data,
      'reviewType' => 'TXT',
    ),
  );
  $object = array(
    'objectIdentifierValue' => $id,
    'objectIdentifierType' => $identifierType,
  );

  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'createMyDataRequest',
      'userId' => $voxb_id,
      'institutionId' => '1',
      'item' => $item,
      'object' => $object,
      'outputType' => $outputType,
    ));

  return $response;
}


/** Do fetchDataRequest
 * @param $userId
 * @param string $outputType
 * @return mixed;
 */
function open_voxb_fetchMyDataRequest($userId, $outputType = 'xml') {
  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'fetchMyDataRequest',
      'userId' => $userId,
      'outputType' => $outputType,
    ));

  return $response;
}

/*************** updateMyDataRequest ************
 * the following methods all goes via same voxb request
 * that is voxb::updateMyDataRequest. Each data option (rating, tags, reviews)
 * has its own method e.g updateRating, updateReview etc..
 */


/** update a rating
 */
function open_voxb_updateRating($voxbIdentifier, $rating, $outputType = 'xml') {
  $item = array(
    'rating' => $rating,
  );
  return open_voxb_updateMyDataRequest($item, $voxbIdentifier, $outputType);
}

/** Update a review item
 * @param $voxbIdentifier
 * @param $review
 * @param string $outputType
 * @return bool|stdClass|string
 */
function open_voxb_updateReview($voxbIdentifier, $review, $outputType = 'xml'){
  $item = array(
    'review' => array(
      'reviewTitle' => $review->title,
      'reviewData' => $review->Data,
      'reviewType' => 'TXT',
    ),
  );
  return open_voxb_updateMyDataRequest($item, $voxbIdentifier, $outputType);
}

/** common execution method for updateMyDataRequest
 * @param $item
 * @param $voxbIdentifier
 * @param $outputType
 * @return bool|stdClass|string
 */
function open_voxb_updateMyDataRequest($item, $voxbIdentifier, $outputType){
  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
    'action' => 'updateMyDataRequest',
    'voxbIdentifier' => $voxbIdentifier,
    'institutionId' => '1',
    'item' => $item,
    'outputType' => $outputType,
  ));

  return $response;

}

/******************* end updateMyDataRequest ************/

/******************* fetchData *************************/

/** Do fetchDataRequest
 *  this method looks for voxb objects identified by type,value
 * @param string isbn; the ISBN identifier to look for
 * @param string outputType;
 *
 * return mixed $response; response from webservice
 */
function open_voxb_fetchDataRequest($id, $identifierType = 'FAUST', $institutionId = NULL, $outputType = 'xml') {
  // set additional parameters for fetchData request
  $fetchData = array(
    'objectIdentifierValue' => $id,
    'objectIdentifierType' => $identifierType,
  );

  return open_voxb_fetchData($fetchData,  $institutionId, $outputType);
}

/** Do fetchDataRequest
 *  this method fetches a single item identified by item_id
 *
 * @param $itemid
 */
function open_voxb_fetchData_by_itemid($itemid, $outputType = 'xml'){
  $fetchData = array(
    'voxbIdentifier' => $itemid,
  );

  return open_voxb_fetchData($fetchData,NULL, $outputType);
}

/** Common execution method for fetchDataRequest
 * @param $fetchData
 * @param null $institutionId
 * @param string $outputType
 * @return bool|stdClass|string
 */
function open_voxb_fetchData($fetchData, $institutionId = NULL, $outputType = 'xml'){
  // institutionid (optional)
  if(isset($institutionId)){
    $fetchData['institutionId'] = $institutionId;
  }
  // contentytper. possible values:
  // review, tags, summaryTags, rating, totalRatings, local or all
  $output = array(
    'contentType' => 'all',
  );

  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
    'action' => 'fetchDataRequest',
    'fetchData' => $fetchData,
    'output' => $output,
    'outputType' => $outputType,
  ));

  return $response;
}


/*****************' end fetchData ******************************7

/** Do createUserRequest
 * @param $userId
 * @param string $outputType
 * @return mixed
 */
function open_voxb_createUserRequest($userId, $outputType = 'xml') {
  // userId is email-address ..
  // set the userAlias .. aliasName MUST be unique or request is rejected from voxb
  $userAlias = array(
    'aliasName' => open_voxb_create_unique_alias($userId),
    'profileLink' => 'http://bibliotek.dk/voxb/'.$userId,
  );

  $fingerprint = array(
    'userIdentifierValue' => $userId,
    'userIdentifierType' => 'local',
    'identityProvider' => 'bibliotek.dk',
    'institutionId' => 1,
  );

  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'createUserRequest',
      'userAlias' => $userAlias,
      'authenticationFingerprint' => $fingerprint,
      'outputType' => $outputType,
    ));

  return $response;
}

/** Do fetchUserRequest by userId
 * @param $userId
 * @return mixed
 */
function open_voxb_fetch_user($userId, $outputType = 'xml'){
  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'fetchUserRequest',
      'userId' => $userId,
      'outputType' => $outputType,
    )
  );
  return $response;
}

/** Do fetchUserRequest by fingerprint
 * @param $userIdentifierValue
 * @return bool|stdClass|string
 */
function open_voxb_fetchUserByFingerPrint($userIdentifierValue,$outputType = 'xml'){
  $authenticationFingerprint = array(
    'userIdentifierValue' => $userIdentifierValue,
    'userIdentifierType' => 'local',
    'identityProvider' => 'bibliotek.dk',
    'institutionId' => 1,
  );
  $client = new ting_client_class();
  $response = $client->do_request('voxb', array(
      'action' => 'fetchUserRequest',
      'authenticationFingerprint' => $authenticationFingerprint,
      'outputType' => $outputType,
    )
  );
  return $response;
}

/** function to create a unique alias - users can change their alias later .. if they want to
 * @param $mail
 */
function open_voxb_create_unique_alias($id) {
  return 'bibliotek.dk:'. $id;
}

/**
 * Implements hook_form_FORM_ID_alter (ting_client_admin_webservices_settings)
 * add a field to webservice client settings
 *
 * */
function open_voxb_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  $form['ting']['open_voxb_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenVoxb URL'),
    '#description' => t('URL to voxb e.g.: https://voxb.addi.dk/1.3/'),
    '#required' => TRUE,
    '#default_value' => variable_get('open_voxb_url', FALSE),
  );

  $form['ting']['voxb_xsd_url'] = array(
    '#type' => 'textfield',
    '#title' => t('voxb XSD URL'),
    '#description' => t('URL to voxb xml schema e.g. https://voxb.addi.dk/x.x/voxb.xsd'),
    '#required' => TRUE,
    '#default_value' => variable_get('voxb_xsd_url', FALSE),
  );

}